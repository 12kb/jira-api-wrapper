import { IConfig } from "./interfaces/iConfig";
import { IJiraApi } from "./interfaces/iJiraApi";
import { IApplicationProperties } from "./interfaces/api/iApplicationProperties";
import { IApplicationrole } from "./interfaces/api/iApplicationrole";
import { IAttachment } from "./interfaces/api/iAttachment";
import { IAuditing } from "./interfaces/api/iAuditing";
import { IAvatar } from "./interfaces/api/iAvatar";
import { IBacklog } from "./interfaces/api/iBacklog";
import { IBoard } from "./interfaces/api/iBoard";
import { IComment } from "./interfaces/api/iComment";
import { IComponent } from "./interfaces/api/iComponent";
import { IConfiguration } from "./interfaces/api/iConfiguration";
import { ICustomFieldOption } from "./interfaces/api/iCustomFieldOption";
import { IDashboard } from "./interfaces/api/iDashboard";
import { IEpic } from "./interfaces/api/iEpic";
import { IExpression } from "./interfaces/api/iExpression";
import { IField } from "./interfaces/api/iField";
import { IFilter } from "./interfaces/api/iFilter";
import { IGroup } from "./interfaces/api/iGroup";
import { IGroups } from "./interfaces/api/iGroups";
import { IGroupUserPicker } from "./interfaces/api/iGroupUserPicker";
import { IIssue } from "./interfaces/api/iIssue";
import { IJql } from "./interfaces/api/IJql";
import { IMyself } from "./interfaces/api/iMyself";
import { INotificationScheme } from "./interfaces/api/iNotificationScheme";
import { ISearch } from "./interfaces/api/iSearch";
import { ISession } from "./interfaces/api/iSession";
import { ISprint } from "./interfaces/api/iSprint";
import { IUsers } from "./interfaces/api/iUsers";
import { IWorklog } from "./interfaces/api/iWorklog";
import { IBuilds } from "./interfaces/api/iBuilds";
import { IDeployments } from "./interfaces/api/iDeployments";
import { IDevelopmentInformation } from "./interfaces/api/iDevelopmentInformation";
import { IFeatureFlags } from "./interfaces/api/iFeatureFlags";
declare class JiraApi implements IJiraApi {
    host: string;
    port: number;
    agileApiVersion: number | string;
    apiVersion: number | string;
    authApiVersion: number | string;
    devInfoApiVersion: number | string;
    featureFlagsApiVersion: number | string;
    deploymentApiVersion: number | string;
    buildsApiVersion: number | string;
    oauth: {
        consumerKey: string;
        privateKey: string;
        token: string;
        tokenSecret: string;
        signatureMethod: string;
    } | undefined;
    basicAuth: {
        base64?: string;
        username?: string;
        password?: string;
    } | undefined;
    cookieJar: any;
    ca: any;
    cert: any;
    key: any;
    strictSSL: boolean;
    pathPrefix: string;
    protocol: string;
    rejectUnauthorized: any;
    webhookApiVersion: number | string;
    applicationProperties: IApplicationProperties;
    applicationrole: IApplicationrole;
    attachment: IAttachment;
    auditing: IAuditing;
    avatar: IAvatar;
    backlog: IBacklog;
    board: IBoard;
    comment: IComment;
    component: IComponent;
    configuration: IConfiguration;
    customFieldOption: ICustomFieldOption;
    dashboard: IDashboard;
    epic: IEpic;
    expression: IExpression;
    field: IField;
    filter: IFilter;
    group: IGroup;
    groups: IGroups;
    groupUserPicker: IGroupUserPicker;
    users: IUsers;
    issue: IIssue;
    jql: IJql;
    myself: IMyself;
    notificationScheme: INotificationScheme;
    search: ISearch;
    sprint: ISprint;
    worklog: IWorklog;
    builds: IBuilds;
    deployments: IDeployments;
    developmentInformation: IDevelopmentInformation;
    featureFlags: IFeatureFlags;
    /**
     * @deprecated This resource is deprecated and will be removed December 1, 2018. For more information,
     * see [Deprecation notice - Basic authentication with passwords and cookie-based authentication]
     * {@link https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-basic-auth-and-cookie-based-auth/}.
     */
    session: ISession;
    constructor(config: IConfig);
    makeUrl(path: string, apiType: 'agile' | 'api' | 'auth' | 'webhook' | 'devInfo' | 'featureFlags' | 'deployment' | 'builds' | string, apiVersion?: number | string): any;
    sendRequest(options: any, callback: any, successString: string): any;
    static getAuthorizeURL(config: IConfig, callback: any): void;
    static swapRequestTokenWithAccessToken(config: IConfig, callback: any): void;
    private static validateConfig;
}
export default JiraApi;
